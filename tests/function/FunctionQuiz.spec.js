const _=require("lodash"),MESSAGE_DEFAULT_RETURN="형식에 맞게 반환해야합니다",MESSAGE_IS_FUNCTION="함수를 반환해야합니다",MESSAGE_PARAMETER_LENGTH="함수가 인자의 개수가 맞아야합니다",MESSAGE_RIGHT_ANSWER="정답을 반환해야합니다",MESSAGE_CALL_COUNT="함수가 필요한 만큼 호출되어야합니다",MESSAGE_NO_MUTATION="원본 데이터에 영향을 주지 않아야합니다",isFunctionMessage=t=>`함수를 반환해야하는데, ${t.toString()}을 반환했습니다.`,paramLengthMessage=(t,n)=>`인자의 개수가 ${n}여야 하는데, ${t}입니다.`,callCounterMessage=(t,n,e)=>`${t}: ${n}번 호출되어야하는데, ${e}번 호출됐습니다`,callCounterMessageGEQ=(t,n,e)=>`${t}: ${n}번 이상 호출되어야하는데, ${e}번 호출됐습니다`,callCounterMessageLEQ=(t,n,e)=>`${t}: ${n}번 이하 호출되어야하는데, ${e}번 호출됐습니다`,iterateIt=(t,n,e)=>{let i=e||10;for(let e=0;e<i;e++)it(`${t} - #${e+1}`,n)},assertCallCounter=(t,n,e)=>{expect(n[t]).toBe(e[t],callCounterMessage(t,e[t],n[t]))},assertFunction=t=>{it("함수를 반환해야합니다",function(){let n=_.isFunction(t);expect(n).toBe(!0,isFunctionMessage(t))})},assertParamLength=(t,n)=>{it("함수가 인자의 개수가 맞아야합니다",function(){let e=t.length,i=n.length;expect(e).toBe(i,paramLengthMessage(e,i))})},assertDefaultReturn=(t,n,e)=>{it("형식에 맞게 반환해야합니다",function(){let{isValid:i,message:o}=n(t,e);expect(i).toBe(!0,o)})},assertDefault=(t,n)=>{assertFunction(t),assertParamLength(t,n)};function randomStringGenerator(t){let n="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";return _.range(t).map(t=>n[_.random(n.length)]).join("")}function getCallCounter(){let t={},n={},e={},i=Array.from(arguments),o=i[0],s=i[1],r=i[2],a=i.slice(3);for(let i=0;i<s.length;i++){let r=s[i];n[r]=o[r],e[r]=0,t[r]=function(){return e[r]+=1,n[r].call(this,...arguments)},o[r]=t[r]}r(...a);for(let t=0,e=s.length;t<e;t++){let e=s[t];o[e]=n[e]}return e}const randomUtils={randomArray:(t,n,e)=>_.range(t).map(t=>_.random(n,e)),randomFunctionArray:t=>_.range(t).map(t=>randomUtils.randomSimpleFunction(1,10)),randomSimpleFunction:(t,n)=>{let e=_.random(4),i=_.random(t,n);return 0==e?function(t){return t+i}:1==e?function(t){return t-i}:2==e?function(t){return t*i}:function(t){return t}},randomBoolean:()=>_.random(1)%2==0};describe("[Function]",function(){const t=require("../../src/function/FunctionQuiz");describe("[함수를 인자로 받기]",function(){describe("[함수를 인자로 받기 - 1 (functionAsParams1)]",function(){const{functionAsParams1:n}=t;assertDefaultReturn(n,t=>{return _.isFunction(t)?{isValid:!0}:{isValid:!1,message:`함수를 반환해야하는데, ${t}이 반환됨`}});const e=n(),i=(t,n)=>n(t);assertDefault(e,i),iterateIt("정답을 반환해야합니다",function(){let t=_.random(100),n=randomUtils.randomSimpleFunction(1,10),o=e(t,n),s=i(t,n);expect(o).toBe(s),_.isEqual(o,s)||(console.log("[ Failed ]: functionAsParams1"),console.log("[ num ]: "+t),console.log("[ f ]: "+n.toString()))},5)}),describe("[함수를 인자로 받기 - 2 (functionAsParams2)]",function(){const{functionAsParams2:n}=t;assertDefaultReturn(n,t=>{return _.isFunction(t)?{isValid:!0}:{isValid:!1,message:`함수를 반환해야하는데, ${t}이 반환됨`}});const e=n(),i=(t,n,e)=>n(t)+e(t);assertDefault(e,i),iterateIt("정답을 반환해야합니다",function(){let t=_.random(100),n=randomUtils.randomSimpleFunction(1,10),o=randomUtils.randomSimpleFunction(1,10),s=e(t,n,o),r=i(t,n,o);expect(s).toBe(r),_.isEqual(s,r)||(console.log("[ Failed ]: functionAsParams2"),console.log("[ num ]: "+t),console.log("[ f ]: "+n.toString()),console.log("[ g ]: "+o.toString()))},5)}),describe("[함수를 인자로 받기 - 3 (functionAsParams3)]",function(){const{functionAsParams3:n}=t;assertDefaultReturn(n,t=>{return _.isFunction(t)?{isValid:!0}:{isValid:!1,message:`함수를 반환해야하는데, ${t}이 반환됨`}});const e=n(),i=(t,n,e)=>e(n(t));assertDefault(e,i),iterateIt("정답을 반환해야합니다",function(){let t=_.random(100),n=randomUtils.randomSimpleFunction(1,10),o=randomUtils.randomSimpleFunction(1,10),s=e(t,n,o),r=i(t,n,o);expect(s).toBe(r),_.isEqual(s,r)||(console.log("[ Failed ]: functionAsParams3"),console.log("[ num ]: "+t),console.log("[ f ]: "+n.toString()),console.log("[ g ]: "+o.toString()))},5)}),describe("[함수를 인자로 받기 - 4 (functionAsParams4)]",function(){const{functionAsParams4:n}=t;assertDefaultReturn(n,t=>{return _.isFunction(t)?{isValid:!0}:{isValid:!1,message:`함수를 반환해야하는데 ${t}이 반환됨`}});const e=n(),i=(t,n,e,i)=>n?i(e(t)):e(i(t));assertDefault(e,i),iterateIt("정답을 반환해야합니다",function(){let t=_.random(100),n=randomUtils.randomBoolean(),o=randomUtils.randomSimpleFunction(1,10),s=randomUtils.randomSimpleFunction(1,10),r=e(t,n,o,s),a=i(t,n,o,s);expect(r).toBe(a),_.isEqual(r,a)||(console.log("[ Failed ]: functionAsParams4"),console.log("[ num ]: "+t),console.log("[ condition ]: "+n),console.log("[ f ]: "+o.toString()),console.log("[ g ]: "+s.toString()))},5)}),describe("[함수를 인자로 받기 - 5 (functionAsParams5)]",function(){const{functionAsParams5:n}=t;assertDefaultReturn(n,t=>{return _.isFunction(t)?{isValid:!0}:{isValid:!1,message:`함수를 반환해야하는데 ${t}이 반환됨`}});const e=n(),i=(t,n)=>n.map(n=>n(t));assertDefault(e,i),iterateIt("정답을 반환해야합니다",function(){let t=_.random(1,100),n=_.random(3,8),o=randomUtils.randomFunctionArray(n),s=e(t,o),r=i(t,o);expect(s).toEqual(r)},5)}),describe("[함수를 인자로 받기 - 6 (functionAsParams6)]",function(){const{functionAsParams6:n}=t;assertDefaultReturn(n,t=>{return _.isFunction(t)?{isValid:!0}:{isValid:!1,message:`함수를 반환해야하는데 ${t}이 반환됨`}});const e=n(),i=(t,n)=>n.reduce((t,n)=>n(t),t);assertDefault(e,i),iterateIt("정답을 반환해야합니다",function(){let t=_.random(1,100),n=_.random(3,7),o=_.range(n).map(t=>randomUtils.randomSimpleFunction(2,5)),s=e(t,o),r=i(t,o);expect(s).toBe(r,`${r}가 나와야하는데, ${s}이 나옴`)},5)})}),describe("[함수의 결과로 함수를 반환하기]",function(){describe("[함수를 반환하는 함수 - 1 (returnFunctionAsResult1)]",function(){const{returnFunctionAsResult1:n}=t;assertDefaultReturn(n,t=>{if(!_.isFunction(t))return{isValid:!1,message:`함수를 반환해야하는데, ${t}이 반환됨`};let n=t();return _.isFunction(n)?{isValid:!0}:{isValid:!1,message:`반환하는 함수 역시 함수를 반환해야합니다., ${n}이 반환됨`}});const e=n(),i=()=>t=>t+1;it("바깥 함수의 인자의 개수가 맞아야합니다",function(){expect(e.length).toBe(i.length,`바깥 함수는 인자의 개수가 0 이어야하는데, ${e.length}가 나옴`)}),it("안쪽 함수의 인자의 개수가 맞아야합니다",function(){let t=e(),n=t=>t+1;expect(t.length).toBe(n.length,`안쪽 함수는 인자의 개수가 1 이어야하는데, ${t.length}가 나옴`)}),iterateIt("정답을 반환해야합니다",function(){let t=e(),n=t=>t+1,i=_.random(1,100),o=t(i),s=n(i);expect(o).toBe(s,`num이 ${i}일 때, ${s}가 나와야하는데, ${o}이 나옴`)},3)}),describe("[함수를 반환하는 함수 - 2 (returnFunctionAsResult2)]",function(){const{returnFunctionAsResult2:n}=t;assertDefaultReturn(n,t=>{if(!_.isFunction(t))return{isValid:!1,message:`함수를 반환해야하는데, ${t}이 반환됨`};let n=t();return _.isFunction(n)?{isValid:!0}:{isValid:!1,message:`반환하는 함수 역시 함수를 반환해야합니다., ${n}이 반환됨`}});const e=n(),i=()=>t=>t+10;it("바깥 함수의 인자의 개수가 맞아야합니다",function(){expect(e.length).toBe(i.length,`바깥 함수는 인자의 개수가 0 이어야하는데, ${e.length}가 나옴`)}),it("안쪽 함수의 인자의 개수가 맞아야합니다",function(){let t=e(),n=t=>t+10;expect(t.length).toBe(n.length,`안쪽 함수는 인자의 개수가 1 이어야하는데, ${t.length}가 나옴`)}),iterateIt("정답을 반환해야합니다",function(){let t=e(),n=t=>t+10,i=_.random(1,100),o=t(i),s=n(i);expect(o).toBe(s,`num이 ${i}일 때, ${s}가 나와야하는데, ${o}이 나옴`)},3)}),describe("[함수를 반환하는 함수 - 3 (returnFunctionAsResult3)]",function(){const{returnFunctionAsResult3:n}=t;assertDefaultReturn(n,t=>{if(!_.isFunction(t))return{isValid:!1,message:`함수를 반환해야하는데, ${t}이 반환됨`};let n=t();return _.isFunction(n)?{isValid:!0}:{isValid:!1,message:`반환하는 함수 역시 함수를 반환해야합니다., ${n}이 반환됨`}});const e=n(),i=t=>n=>n+t;it("바깥 함수의 인자의 개수가 맞아야합니다",function(){expect(e.length).toBe(i.length,`바깥 함수는 인자의 개수가 ${i.length} 이어야하는데, ${e.length}가 나옴`)}),it("안쪽 함수의 인자의 개수가 맞아야합니다",function(){let t=e(),n=i();expect(t.length).toBe(n.length,`안쪽 함수는 인자의 개수가 ${n.length} 이어야하는데, ${t.length}가 나옴`)}),iterateIt("정답을 반환해야합니다",function(){let t=_.random(5,10),n=e(t),o=i(t),s=_.random(1,100),r=n(s),a=o(s);expect(r).toBe(a,`num이 ${s}이고, x가 ${t}일 때, ${a}가 나와야하는데, ${r}이 나옴`)},3)})}),describe("[복합된 형태]",function(){describe("[연습문제 - 1 (practice1)]",function(){const{practice1:n}=t;assertDefaultReturn(n,t=>{if(!_.isFunction(t))return{isValid:!1,message:`함수를 반환해야하는데, ${t}이 반환됨`};let n=t();return _.isFunction(n)?{isValid:!0}:{isValid:!1,message:`반환하는 함수 역시 함수를 반환해야합니다., ${n}이 반환됨`}});const e=n(),i=()=>(t,n)=>n(t);it("바깥 함수의 인자의 개수가 맞아야합니다",function(){expect(e.length).toBe(i.length,`바깥 함수는 인자의 개수가 ${i.length} 이어야하는데, ${e.length}가 나옴`)}),it("안쪽 함수의 인자의 개수가 맞아야합니다",function(){let t=e(),n=(t,n)=>n(t);expect(t.length).toBe(n.length,`안쪽 함수는 인자의 개수가 ${n.length} 이어야하는데, ${t.length}가 나옴`)}),iterateIt("정답을 반환해야합니다",function(){let t=e(),n=(t,n)=>n(t),i=_.random(1,100),o=randomUtils.randomSimpleFunction(5,10),s=t(i,o),r=n(i,o);expect(s).toBe(r,`num이 ${i}이고, f가 ${o}일 때, ${r}가 나와야하는데, ${s}이 나옴`)},3)}),describe("[연습문제 - 2 (practice2)]",function(){const{practice2:n}=t;assertDefaultReturn(n,t=>{if(!_.isFunction(t))return{isValid:!1,message:`함수를 반환해야하는데, ${t}이 반환됨`};let n=t();return _.isFunction(n)?{isValid:!0}:{isValid:!1,message:`반환하는 함수 역시 함수를 반환해야합니다., ${n}이 반환됨`}});const e=n(),i=()=>(t,n,e)=>n(t)+e(t);it("바깥 함수의 인자의 개수가 맞아야합니다",function(){expect(e.length).toBe(i.length,`바깥 함수는 인자의 개수가 ${i.length} 이어야하는데, ${e.length}가 나옴`)}),it("안쪽 함수의 인자의 개수가 맞아야합니다",function(){let t=e(),n=(t,n,e)=>n(t)+e(t);expect(t.length).toBe(n.length,`안쪽 함수는 인자의 개수가 ${n.length} 이어야하는데, ${t.length}가 나옴`)}),iterateIt("정답을 반환해야합니다",function(){let t=e(),n=(t,n,e)=>n(t)+e(t),i=_.random(1,100),o=randomUtils.randomSimpleFunction(5,10),s=randomUtils.randomSimpleFunction(4,9),r=t(i,o,s),a=n(i,o,s);expect(r).toBe(a,`num이 ${i}, f가 ${o}, g가 ${s}일 때, ${a}가 나와야하는데, ${r}이 나옴`)},3)}),describe("[연습문제 - 3 (practice3)]",function(){const{practice3:n}=t;assertDefaultReturn(n,t=>{if(!_.isFunction(t))return{isValid:!1,message:`함수를 반환해야하는데, ${t}이 반환됨`};let n=t();return _.isFunction(n)?{isValid:!0}:{isValid:!1,message:`반환하는 함수 역시 함수를 반환해야합니다., ${n}이 반환됨`}});const e=n(),i=()=>(t,n,e)=>e(n(t));it("바깥 함수의 인자의 개수가 맞아야합니다",function(){expect(e.length).toBe(i.length,`바깥 함수는 인자의 개수가 ${i.length} 이어야하는데, ${e.length}가 나옴`)}),it("안쪽 함수의 인자의 개수가 맞아야합니다",function(){let t=e(),n=(t,n,e)=>e(n(t));expect(t.length).toBe(n.length,`안쪽 함수는 인자의 개수가 ${n.length} 이어야하는데, ${t.length}가 나옴`)}),iterateIt("정답을 반환해야합니다",function(){let t=e(),n=(t,n,e)=>e(n(t)),i=_.random(1,100),o=randomUtils.randomSimpleFunction(5,10),s=randomUtils.randomSimpleFunction(4,9),r=t(i,o,s),a=n(i,o,s);expect(r).toBe(a,`num이 ${i}, f가 ${o}, g가 ${s}일 때, ${a}가 나와야하는데, ${r}이 나옴`)},3)}),describe("[연습문제 - 4 (practice4)]",function(){const{practice4:n}=t;assertDefaultReturn(n,t=>{if(!_.isFunction(t))return{isValid:!1,message:`함수를 반환해야하는데, ${t}이 반환됨`};let n=t();return _.isFunction(n)?{isValid:!0}:{isValid:!1,message:`반환하는 함수 역시 함수를 반환해야합니다., ${n}이 반환됨`}});const e=n(),i=t=>(n,e)=>t(e(n));it("바깥 함수의 인자의 개수가 맞아야합니다",function(){expect(e.length).toBe(i.length,`바깥 함수는 인자의 개수가 ${i.length} 이어야하는데, ${e.length}가 나옴`)}),it("안쪽 함수의 인자의 개수가 맞아야합니다",function(){let t=e(),n=i();expect(t.length).toBe(n.length,`안쪽 함수는 인자의 개수가 ${n.length} 이어야하는데, ${t.length}가 나옴`)}),iterateIt("정답을 반환해야합니다",function(){let t=randomUtils.randomSimpleFunction(4,9),n=e(t),o=i(t),s=_.random(1,100),r=randomUtils.randomSimpleFunction(5,10),a=n(s,r),l=o(s,r);expect(a).toBe(l,`num이 ${s}, f가 ${r}, g가 ${t}일 때, ${l}가 나와야하는데, ${a}이 나옴`)},3)}),describe("[연습문제 - 5 (practice5)]",function(){const{practice5:n}=t;assertDefaultReturn(n,t=>{if(!_.isFunction(t))return{isValid:!1,message:`함수를 반환해야하는데, ${t}이 반환됨`};let n=t();return _.isFunction(n)?{isValid:!0}:{isValid:!1,message:`반환하는 함수 역시 함수를 반환해야합니다., ${n}이 반환됨`}});const e=n(),i=t=>n=>t.map(t=>t(n));it("바깥 함수의 인자의 개수가 맞아야합니다",function(){expect(e.length).toBe(i.length,`바깥 함수는 인자의 개수가 ${i.length} 이어야하는데, ${e.length}가 나옴`)}),it("안쪽 함수의 인자의 개수가 맞아야합니다",function(){let t=e(),n=i();expect(t.length).toBe(n.length,`안쪽 함수는 인자의 개수가 ${n.length} 이어야하는데, ${t.length}가 나옴`)}),iterateIt("정답을 반환해야합니다",function(){let t=randomUtils.randomFunctionArray(5),n=e(t),o=i(t),s=_.random(1,100),r=n(s),a=o(s);expect(r).toEqual(a)},3)}),describe("[연습문제 - 6 (practice6)]",function(){const{practice6:n}=t;assertDefaultReturn(n,t=>{if(!_.isFunction(t))return{isValid:!1,message:`함수를 반환해야하는데, ${t}이 반환됨`};let n=t();return _.isFunction(n)?{isValid:!0}:{isValid:!1,message:`반환하는 함수 역시 함수를 반환해야합니다., ${n}이 반환됨`}});const e=n(),i=t=>n=>t.reduce((t,n)=>n(t),n);it("바깥 함수의 인자의 개수가 맞아야합니다",function(){expect(e.length).toBe(i.length,`바깥 함수는 인자의 개수가 ${i.length} 이어야하는데, ${e.length}가 나옴`)}),it("안쪽 함수의 인자의 개수가 맞아야합니다",function(){let t=e(),n=i();expect(t.length).toBe(n.length,`안쪽 함수는 인자의 개수가 ${n.length} 이어야하는데, ${t.length}가 나옴`)}),iterateIt("정답을 반환해야합니다",function(){let t=randomUtils.randomFunctionArray(5),n=e(t),o=i(t),s=_.random(1,100),r=n(s),a=o(s);expect(r).toEqual(a)},3)})})});