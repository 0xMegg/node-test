const _=require("lodash"),fnKeys=["bind","apply","call"],MESSAGE_DEFAULT_RETURN="형식에 맞게 반환해야합니다",MESSAGE_IS_FUNCTION="함수를 반환해야합니다",MESSAGE_PARAMETER_LENGTH="함수 인자의 개수가 맞아야합니다",MESSAGE_RIGHT_ANSWER="정답을 반환해야합니다",MESSAGE_CALL_COUNT="함수가 필요한 만큼 호출되어야합니다",MESSAGE_NO_MUTATION="원본 데이터에 영향을 주지 않아야합니다",MESSAGE_PROTOTYPE_PROPERTY="프로토타입의 프로퍼티가 맞아야합니다",MESSAGE_WRONG_INHERITANCE="상속을 정확히 구현해야합니다",isFunctionMessage=e=>`함수를 반환해야하는데, ${e.toString()}을 반환했습니다.`,paramLengthMessage=(e,t)=>`인자의 개수가 ${t}여야 하는데, ${e}입니다.`,callCounterMessage=(e,t,n)=>`${e}: ${t}번 호출되어야하는데, ${n}번 호출됐습니다`,callCounterMessageGEQ=(e,t,n)=>`${e}: ${t}번 이상 호출되어야하는데, ${n}번 호출됐습니다`,callCounterMessageLEQ=(e,t,n)=>`${e}: ${t}번 이하 호출되어야하는데, ${n}번 호출됐습니다`,inheritanceMessage=(e,t)=>`${t.name} 이 ${e.name}을 상속해야합니다`,wrongConstructorMessage=e=>`${e.name}의 prototype객체의 constructor가 ${e.name}이 아닙니다`,messageDefaultReturn=(e,t)=>`${t}을 반환해야하는데, ${e}을 반환했습니다`,iterateIt=(e,t,n)=>{let a=n||10;for(let n=0;n<a;n++)it(`${e} - #${n+1}`,t)},assertDefaultReturn=(e,t,n)=>{it("형식에 맞게 반환해야합니다",function(){let{isValid:a,message:r}=t(e,n);expect(a).toBe(!0,r)})},assertCallCounter=(e,t,n)=>{expect(t[e]).toBe(n[e],callCounterMessage(e,n[e],t[e]))},assertFunction=e=>{it("함수를 반환해야합니다",function(){let t=_.isFunction(e);expect(t).toBe(!0,isFunctionMessage(e))})},assertParamLength=(e,t)=>{it("함수 인자의 개수가 맞아야합니다",function(){let n=e.length,a=t.length;expect(n).toBe(a,paramLengthMessage(n,a))})},assertDefault=(e,t)=>{assertFunction(e),assertParamLength(e,t)},assertPrototypeEquality=(e,t)=>{it("프로토타입의 프로퍼티가 맞아야합니다",function(){let n=!0,a=Object.keys(e.prototype);Object.keys(t.prototype).forEach(e=>{a.includes(e)||(n=!1)}),expect(n).toBe(!0)})},assertInheritance=(e,t)=>{it("상속을 정확히 구현해야합니다",function(){let n=t.prototype instanceof e,a=t.prototype.constructor===t;expect(n).toBe(!0,inheritanceMessage(e,t)),expect(a).toBe(!0,wrongConstructorMessage(e))})};function randomStringGenerator(e){let t="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";return _.range(e).map(e=>t[_.random(t.length)]).join("")}function getCallCounter(){let e={},t={},n={},a=Array.from(arguments),r=a[0],o=a[1],i=a[2],s=a.slice(3);for(let a=0;a<o.length;a++){let i=o[a];t[i]=r[i],n[i]=0,e[i]=function(){return n[i]+=1,t[i].call(this,...arguments)},r[i]=e[i]}i(...s);for(let e=0,n=o.length;e<n;e++){let n=o[e];r[n]=t[n]}return n}const randomUtils={randomArray:(e,t,n)=>_.range(e).map(e=>_.random(t,n)),randomFunctionArray:e=>_.range(e).map(e=>randomUtils.randomSimpleFunction(1,10)),randomSimpleFunction:(e,t)=>{let n=_.random(4),a=_.random(e,t);return 0==n?function(e){return e+a}:1==n?function(e){return e-a}:2==n?function(e){return e*a}:function(e){return e}},randomBoolean:()=>_.random(1)%2==0,randomStringArray:(e,t)=>_.range(e).map(e=>randomStringGenerator(t)),randomName:()=>{let e=["John","Brian","Kent","David","Kyle","Robby","TJ","Tarjan","Edsger","Dijkstra","Maria","Marcus","Miller","Jaco","Jacob","Steven","Phobie","Aaron","Banny","Bones","Bexter","Dexter"];return e[_.random(e.length)]}};describe("[Function]",function(){describe("[API]",function(){const e=require("../../src/function/ApiQuiz");describe("[Call - 1 (callPractice1)]",function(){const{callPractice1:t}=e;assertDefaultReturn(t,e=>{let t=e({name:"jaysok",age:20,introduce:function(e,t){return`My name is ${this.name}, and I'm ${this.age} year-old.`+(e||"")+(t||"")}},{name:"eminem",age:30});return"string"!=typeof t?{isValid:!1,message:`문자열을 반환해야하는데, ${typeof t}가 반환됨`}:{isValid:!0}});let n=t;iterateIt("정답을 반환해야합니다",function(){let e={name:randomUtils.randomName()+"-"+_.random(1,2e3),age:_.random(10,30),introduce:function(e,t){return`name: ${this.name}, age: ${this.age}`+(e||"")+(t||"")}},t={name:randomUtils.randomName()+"-"+_.random(1,2e3),age:_.random(10,30)},a="message: "+randomStringGenerator(10),r="jam: "+randomStringGenerator(3),o=n(e,t,a,r),i=((e,t,n,a)=>e.introduce.call(t,n,a))(e,t,a,r);expect(o).toEqual(i)},5)}),describe("[Call - 2 (callPractice2)]",function(){const{callPractice2:t}=e,n=(e,t,n)=>{let a=e[n];return a?a.call(t):0};assertDefaultReturn(t,e=>{let t=e({name:"jaysok",age:20,introduce:function(e,t){return`My name is ${this.name}, and I'm ${this.age} year-old.`+(e||"")+(t||"")}},{name:"eminem",age:30},"introduce");return"string"!=typeof t?{isValid:!1,message:`문자열을 반환해야하는데, ${typeof t}가 반환됨`}:{isValid:!0}});let a=t;iterateIt("정답을 반환해야합니다",function(){let e=randomStringGenerator(10),t={name:randomUtils.randomName()+"-"+_.random(1,2e3),age:_.random(10,30),[e]:function(e,t){return`name: ${this.name}, age: ${this.age}`+(e||"")+(t||"")}},r={name:randomUtils.randomName()+"-"+_.random(1,2e3),age:_.random(10,30)},o=(randomStringGenerator(10),randomStringGenerator(3),a(t,r,e)),i=n(t,r,e);expect(o).toEqual(i);try{let e=a(t,r),o=n(t,r);expect(e).toBe(o,"fnKey가 없을 땐 0을 반환해야합니다")}catch(e){fail("fnKey가 없을 땐 0을 반환해야합니다")}},5)}),describe("[Apply - 1 (applyPractic1)]",function(){const{applyPractice1:t}=e,n=(e,t,n,a)=>e.introduce.apply(t,[n,a]);assertDefaultReturn(t,e=>{let t=e({name:"jaysok",age:20,introduce:function(e,t){return`My name is ${this.name}, and I'm ${this.age} year-old.`+(e||"")+(t||"")}},{name:"eminem",age:30});return"string"!=typeof t?{isValid:!1,message:`문자열을 반환해야하는데, ${typeof t}가 반환됨`}:{isValid:!0}});let a=t;iterateIt("정답을 반환해야합니다",function(){let e={name:randomUtils.randomName()+"-"+_.random(1,2e3),age:_.random(10,30),introduce:function(e,t){return`name: ${this.name}, age: ${this.age}`+(e||"")+(t||"")}},t={name:randomUtils.randomName()+"-"+_.random(1,2e3),age:_.random(10,30)},r="message: "+randomStringGenerator(10),o="jam: "+randomStringGenerator(3),i=a(e,t,r,o),s=n(e,t,r,o);expect(i).toEqual(s)},5),iterateIt(MESSAGE_CALL_COUNT,function(){let e={name:randomUtils.randomName()+"-"+_.random(1,2e3),age:_.random(10,30),introduce:function(e,t){return`name: ${this.name}, age: ${this.age}`+(e||"")+(t||"")}},t={name:randomUtils.randomName()+"-"+_.random(1,2e3),age:_.random(10,30)},r="message: "+randomStringGenerator(10),o="jam: "+randomStringGenerator(3),i=getCallCounter(Function.prototype,["apply"],a,e,t,r,o),s=getCallCounter(Function.prototype,["apply"],n,e,t,r,o);assertCallCounter("apply",i,s)},3)}),describe("[Apply - 2 (applyPractice2)]",function(){const{applyPractice2:t}=e,n=function(){let e=Array.prototype.slice.apply(arguments);return e.reduce((e,t)=>e+t,e[e.length-1])};assertDefaultReturn(t,e=>{let t=e(1);return"number"!=typeof t?{isValid:!1,message:`숫자를 반환해야하는데, ${typeof t}가 반환됨`}:{isValid:!0}});let a=t;iterateIt("정답을 반환해야합니다",function(){let e=randomUtils.randomArray(5,1,100),t=a(...e),r=n(...e);expect(t).toBe(r,`${r}를 반환해야하는데, ${t}을 반환함`)},5),iterateIt(MESSAGE_CALL_COUNT,function(){let e=randomUtils.randomArray(5,1,100),t=(a(...e),n(...e),getCallCounter(Function.prototype,["apply"],a,...e)),r=getCallCounter(Function.prototype,["apply"],n,...e);assertCallCounter("apply",t,r)},3)}),describe("[Bind - 1 (bindPractice1)]",function(){const{bindPractice1:t}=e,n=function(e,t){return e.introduce.bind(t)};assertDefaultReturn(t,e=>{let t=e({name:"jaysok",age:20,introduce:function(e,t){return`My name is ${this.name}, and I'm ${this.age} year-old.`+(e||"")+(t||"")}},{name:"eminem",age:30});return"function"!=typeof t?{isValid:!1,message:`함수를 반환해야하는데, ${typeof t}가 반환됨`}:{isValid:!0}});let a=t;iterateIt("정답을 반환해야합니다",function(){let e={name:randomUtils.randomName()+"-"+_.random(1,2e3),age:_.random(10,30),introduce:function(e,t){return`name: ${this.name}, age: ${this.age}`+(e||"")+(t||"")}},t={name:randomUtils.randomName()+"-"+_.random(1,2e3),age:_.random(10,30)},r="message: "+randomStringGenerator(10),o="jam: "+randomStringGenerator(3),i=a(e,t)(r,o),s=n(e,t)(r,o);expect(i).toEqual(s)},5),iterateIt(MESSAGE_CALL_COUNT,function(){let e={name:randomUtils.randomName()+"-"+_.random(1,2e3),age:_.random(10,30),introduce:function(e,t){return`name: ${this.name}, age: ${this.age}`+(e||"")+(t||"")}},t={name:randomUtils.randomName()+"-"+_.random(1,2e3),age:_.random(10,30)},r=getCallCounter(Function.prototype,["bind"],a,e,t),o=getCallCounter(Function.prototype,["bind"],n,e,t);assertCallCounter("bind",r,o)},3)}),describe("[Bind - 2 (bindPractice2)]",function(){const{bindPractice2:t}=e;assertDefaultReturn(t,e=>{let t=e();return"function"!=typeof t?{isValid:!1,message:`함수를 반환해야하는데, ${typeof t}가 반환됨`}:{isValid:!0}});let n=t(),a=Math.max.bind(null,0);iterateIt("정답을 반환해야합니다",function(){let e=randomUtils.randomArray(_.random(5,10),-10,20),t=n(...e),r=a(...e);expect(t).toBe(r,`${r}가 나와야하는데, ${t}이 나옴`)},5),iterateIt(MESSAGE_CALL_COUNT,function(){let e=randomUtils.randomArray(_.random(5,10),-10,20),t=getCallCounter(Function.prototype,["bind"],n,...e),r=getCallCounter(Function.prototype,["bind"],a,...e);assertCallCounter("bind",t,r)},3)})})});