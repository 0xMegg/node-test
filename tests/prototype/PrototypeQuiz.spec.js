const _=require("lodash"),MESSAGE_DEFAULT_RETURN="형식에 맞게 반환해야합니다",MESSAGE_IS_FUNCTION="함수를 반환해야합니다",MESSAGE_PARAMETER_LENGTH="함수 인자의 개수가 맞아야합니다",MESSAGE_RIGHT_ANSWER="정답을 반환해야합니다",MESSAGE_CALL_COUNT="함수가 필요한 만큼 호출되어야합니다",MESSAGE_NO_MUTATION="원본 데이터에 영향을 주지 않아야합니다",MESSAGE_PROTOTYPE_PROPERTY="프로토타입의 프로퍼티가 맞아야합니다",MESSAGE_WRONG_INHERITANCE="상속을 정확히 구현해야합니다",isFunctionMessage=e=>`함수를 반환해야하는데, ${e.toString()}을 반환했습니다.`,paramLengthMessage=(e,t)=>`인자의 개수가 ${t}여야 하는데, ${e}입니다.`,callCounterMessage=(e,t,n)=>`${e}: ${t}번 호출되어야하는데, ${n}번 호출됐습니다`,callCounterMessageGEQ=(e,t,n)=>`${e}: ${t}번 이상 호출되어야하는데, ${n}번 호출됐습니다`,callCounterMessageLEQ=(e,t,n)=>`${e}: ${t}번 이하 호출되어야하는데, ${n}번 호출됐습니다`,inheritanceMessage=(e,t)=>`${t.name} 이 ${e.name}을 상속해야합니다`,wrongConstructorMessage=e=>`${e.name}의 prototype객체의 constructor가 ${e.name}이 아닙니다`,messageDefaultReturn=(e,t)=>`${t}을 반환해야하는데, ${e}을 반환했습니다`,iterateIt=(e,t,n)=>{let r=n||10;for(let n=0;n<r;n++)it(`${e} - #${n+1}`,t)},assertDefaultReturn=(e,t,n)=>{it("형식에 맞게 반환해야합니다",function(){let{isValid:r,message:o}=t(e,n);expect(r).toBe(!0,o)})},assertCallCounter=(e,t,n)=>{expect(t[e]).toBe(n[e],callCounterMessage(e,n[e],t[e]))},assertFunction=e=>{it("함수를 반환해야합니다",function(){let t=_.isFunction(e);expect(t).toBe(!0,isFunctionMessage(e))})},assertParamLength=(e,t)=>{it("함수 인자의 개수가 맞아야합니다",function(){let n=e.length,r=t.length;expect(n).toBe(r,paramLengthMessage(n,r))})},assertDefault=(e,t)=>{assertFunction(e),assertParamLength(e,t)},assertPrototypeEquality=(e,t)=>{it("프로토타입의 프로퍼티가 맞아야합니다",function(){let n=!0,r=Object.keys(e.prototype);Object.keys(t.prototype).forEach(e=>{r.includes(e)||(n=!1)}),expect(n).toBe(!0)})},assertInheritance=(e,t)=>{it("상속을 정확히 구현해야합니다",function(){let n=t.prototype instanceof e,r=t.prototype.constructor===t;expect(n).toBe(!0,inheritanceMessage(e,t)),expect(r).toBe(!0,wrongConstructorMessage(e))})};function randomStringGenerator(e){let t="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";return _.range(e).map(e=>t[_.random(t.length)]).join("")}function getCallCounter(){let e={},t={},n={},r=Array.from(arguments),o=r[0],a=r[1],s=r[2],i=r.slice(3);for(let r=0;r<a.length;r++){let s=a[r];t[s]=o[s],n[s]=0,e[s]=function(){return n[s]+=1,t[s].call(this,...arguments)},o[s]=e[s]}s(...i);for(let e=0,n=a.length;e<n;e++){let n=a[e];o[n]=t[n]}return n}const randomUtils={randomArray:(e,t,n)=>_.range(e).map(e=>_.random(t,n)),randomFunctionArray:e=>_.range(e).map(e=>randomUtils.randomSimpleFunction(1,10)),randomSimpleFunction:(e,t)=>{let n=_.random(4),r=_.random(e,t);return 0==n?function(e){return e+r}:1==n?function(e){return e-r}:2==n?function(e){return e*r}:function(e){return e}},randomBoolean:()=>_.random(1)%2==0,randomStringArray:(e,t)=>_.range(e).map(e=>randomStringGenerator(t))};function PersonE(e,t){this.name=e,this.age=t}describe("[Prototype]",function(){const e=require("../../src/prototype/PrototypeQuiz");describe("[definePersonClass]",function(){const{definePersonClass:t}=e;assertDefaultReturn(t,(e,t)=>{let n=e(t);return{isValid:!0==(e=>"function"==typeof e)(n),message:`클래스로 사용할 함수를 리턴해야하는데, ${n}가 반환됨`}});let n=t(),r=PersonE;assertDefault(n,r),assertPrototypeEquality(n,r),iterateIt("정답을 반환해야합니다",function(){let e=t(),n=randomStringGenerator(5),r=_.random(5,80),o=randomStringGenerator(5),a=_.random(5,80),s=new e(n,r);expect(s.getName()).toEqual(n),expect(s.getAge()).toBe(r),s.setName(o),s.setAge(a),expect(s.getName()).toEqual(o),expect(s.getAge()).toEqual(a)},3)}),describe("[defineTeacherClass]",function(){const{defineTeacherClass:t}=e;function n(e,t,n){this.name=e,this.age=t,this.subject=n}assertDefaultReturn(t,(e,t)=>{let n=e(t);return{isValid:!0==(e=>"function"==typeof e)(n),message:`클래스로 사용할 함수를 리턴해야하는데, ${n}가 반환됨`}}),n.prototype.getName=function(){return this.name},n.prototype.getAge=function(){return this.age},n.prototype.getSubject=function(){return this.subject},n.prototype.setName=function(e){this.name=e},n.prototype.setAge=function(e){this.age=e},n.prototype.setSubject=function(e){this.subject=e};let r=t(),o=n;assertDefault(r,o),assertPrototypeEquality(r,o),iterateIt("정답을 반환해야합니다",function(){let e=r,t=randomStringGenerator(5),n=_.random(5,80),o=randomStringGenerator(5),a=randomStringGenerator(5),s=_.random(5,80),i=randomStringGenerator(5),u=new e(t,n,o);expect(u.getName()).toEqual(t),expect(u.getAge()).toBe(n),expect(u.getSubject()).toEqual(o),u.setName(a),u.setAge(s),u.setSubject(i),expect(u.getName()).toEqual(a),expect(u.getAge()).toEqual(s),expect(u.getSubject()).toEqual(i)},3)}),describe("[defineStudentClass]",function(){const{defineStudentClass:t}=e;function n(e,t,n){this.name=e,this.age=t,this.subjects=n}assertDefaultReturn(t,(e,t)=>{let n=e(t);return{isValid:!0==(e=>"function"==typeof e)(n),message:`클래스로 사용할 함수를 리턴해야하는데, ${n}가 반환됨`}}),n.prototype.getName=function(){return this.name},n.prototype.getAge=function(){return this.age},n.prototype.getSubjects=function(){return this.subjects},n.prototype.setName=function(e){this.name=e},n.prototype.setAge=function(e){this.age=e},n.prototype.setSubjects=function(e){this.subjects=e},n.prototype.addSubject=function(e){this.subjects.push(e)};let r=t(),o=n;assertDefault(r,o),assertPrototypeEquality(r,o),iterateIt("정답을 반환해야합니다",function(){let e=r,t=randomStringGenerator(5),n=_.random(5,80),o=randomUtils.randomStringArray(3,5),a=randomStringGenerator(5),s=_.random(5,80),i=randomUtils.randomStringArray(4,5),u=new e(t,n,o);expect(u.getName()).toEqual(t),expect(u.getAge()).toBe(n),expect(u.getSubjects()).toEqual(o),u.setName(a),u.setAge(s),u.setSubjects(i),expect(u.getName()).toEqual(a),expect(u.getAge()).toEqual(s),expect(u.getSubjects()).toEqual(i);let c=randomStringGenerator(5);u.addSubject(c),expect(u.getSubjects().slice(-1)).toEqual([c])},3)}),describe("[defineTeacherClass2]",function(){const{defineTeacherClass2:t}=e;assertDefaultReturn(t,(e,t)=>{let n=e(t),r=e=>"function"==typeof e;return(e=>"object"==typeof e&&null!==e)(n)?n.hasOwnProperty("Teacher")?n.hasOwnProperty("Person")?r(n.Teacher)?r(n.Person)?{isValid:!0}:{isValid:!1,message:"Person이 함수가 아닙니다"}:{isValid:!1,message:"Teacher가 함수가 아닙니다"}:{isValid:!1,message:"반환 객체가 key로 Person를 가지고 있지 않습니다"}:{isValid:!1,message:"반환 객체가 key로 Teacher를 가지고 있지 않습니다"}:{isValid:!1,message:"Teacher와 Person을 key로 가지고, 각각의 클래스를 함수로 가지는 객체를 반환해야합니다"}});const{Teacher:n,Person:r}=t();function o(e,t,n){PersonE.call(this,e,t),this.subject=n}o.prototype=Object.create(PersonE.prototype),o.prototype.constructor=o,o.prototype.getSubject=function(){return this.subject},o.prototype.setSubject=function(e){this.subject=e};let a=n,s=o;assertDefault(a,s),assertPrototypeEquality(a,s),assertInheritance(r,n),iterateIt("정답을 반환해야합니다",function(){let e=a,t=randomStringGenerator(5),n=_.random(5,80),r=randomStringGenerator(5),o=randomStringGenerator(5),s=_.random(5,80),i=randomStringGenerator(5),u=new e(t,n,r);expect(u.getName()).toEqual(t),expect(u.getAge()).toBe(n),expect(u.getSubject()).toEqual(r),u.setName(o),u.setAge(s),u.setSubject(i),expect(u.getName()).toEqual(o),expect(u.getAge()).toEqual(s),expect(u.getSubject()).toEqual(i)},3)}),describe("[defineStudentClass2]",function(){const{defineStudentClass2:t}=e;assertDefaultReturn(t,(e,t)=>{let n=e(t),r=e=>"function"==typeof e;return(e=>"object"==typeof e&&null!==e)(n)?n.hasOwnProperty("Student")?n.hasOwnProperty("Person")?r(n.Student)?r(n.Person)?{isValid:!0}:{isValid:!1,message:"Person이 함수가 아닙니다"}:{isValid:!1,message:"Student가 함수가 아닙니다"}:{isValid:!1,message:"반환 객체가 key로 Person를 가지고 있지 않습니다"}:{isValid:!1,message:"반환 객체가 key로 Student를 가지고 있지 않습니다"}:{isValid:!1,message:"Student와 Person을 key로 가지고, 각각의 클래스를 함수로 가지는 객체를 반환해야합니다"}});const{Student:n,Person:r}=t();function o(e,t,n){PersonE.call(this,e,t),this.subjects=n}o.prototype=Object.create(PersonE.prototype),o.prototype.constructor=o,o.prototype.getSubjects=function(){return this.subjects},o.prototype.setSubjects=function(e){this.subjects=e},o.prototype.addSubject=function(e){this.subjects.push(e)};let a=n,s=o;assertDefault(a,s),assertPrototypeEquality(a,s),assertInheritance(r,n),iterateIt("정답을 반환해야합니다",function(){let e=randomStringGenerator(5),t=_.random(5,80),n=randomUtils.randomStringArray(5,5),r=randomStringGenerator(5),o=_.random(5,80),s=randomUtils.randomStringArray(5,5),i=randomStringGenerator(6),u=s.slice(),c=new a(e,t,n);expect(c.getName()).toEqual(e),expect(c.getAge()).toBe(t),expect(c.getSubjects()).toEqual(n),c.setName(r),c.setAge(o),c.setSubjects(s),expect(c.getName()).toEqual(r),expect(c.getAge()).toEqual(o),expect(c.getSubjects()).toEqual(s),c.addSubject(i),expect(c.getSubjects()).toEqual(u.concat(i))},3)}),describe("[defineEmployeeClass]",function(){const{defineEmployeeClass:t}=e;assertDefaultReturn(t,(e,t)=>{let n=e(t),r=e=>"function"==typeof e;return(e=>"object"==typeof e&&null!==e)(n)?n.hasOwnProperty("Employee")?n.hasOwnProperty("Person")?r(n.Employee)?r(n.Person)?{isValid:!0}:{isValid:!1,message:"Person이 함수가 아닙니다"}:{isValid:!1,message:"Employee가 함수가 아닙니다"}:{isValid:!1,message:"반환 객체가 key로 Person를 가지고 있지 않습니다"}:{isValid:!1,message:"반환 객체가 key로 Employee를 가지고 있지 않습니다"}:{isValid:!1,message:"Employee와 Person을 key로 가지고, 각각의 클래스를 함수로 가지는 객체를 반환해야합니다"}});const{Employee:n,Person:r}=t();let o=n,a=s;function s(e,t,n,r){PersonE.call(this,t,n),this.id=e,this.department=r}s.prototype=Object.create(PersonE.prototype),s.prototype.constructor=s,s.prototype.getId=function(){return this.id},s.prototype.setId=function(e){this.id=e},s.prototype.getDepartment=function(){return this.department},s.prototype.setDepartment=function(e){this.department=e},assertDefault(o,a),assertPrototypeEquality(o,a),assertInheritance(r,n),iterateIt("정답을 반환해야합니다",function(){let e=o,t="emp-"+randomStringGenerator(5),n=randomStringGenerator(5),r=_.random(5,80),a=randomStringGenerator(5),s="emp-"+randomStringGenerator(5),i=randomStringGenerator(5),u=_.random(5,80),c=randomStringGenerator(5),p=new e(t,n,r,a);expect(p.getId()).toEqual(t),expect(p.getName()).toEqual(n),expect(p.getAge()).toBe(r),expect(p.getDepartment()).toEqual(a),p.setId(s),p.setName(i),p.setAge(u),p.setDepartment(c),expect(p.getId()).toEqual(s),expect(p.getName()).toEqual(i),expect(p.getAge()).toEqual(u),expect(p.getDepartment()).toEqual(c)},3)}),describe("[defineRatingClass]",function(){const{defineRatingClass:t}=e;function n(e,t,n){this.bookId=e,this.activeShape=t,this.inactiveShape=n,this.rating=null,this.ratingStatus=[1,2,3,4,5].map(e=>n)}assertDefaultReturn(t,(e,t)=>{let n=e(t);return{isValid:!0==(e=>"function"==typeof e)(n),message:`클래스로 사용할 함수를 리턴해야하는데, ${n}가 반환됨`}}),n.prototype.getBookId=function(){return this.bookId},n.prototype.getActiveShape=function(){return this.activeShape},n.prototype.getInactiveShape=function(){return this.inactiveShape},n.prototype.getRating=function(){return this.rating},n.prototype.getRatingStatus=function(){return this.ratingStatus},n.prototype.setRating=function(e){this.rating=e;for(let t=0;t<5;t++)this.ratingStatus[t]=t<e?this.activeShape:this.inactiveShape},n.prototype.isTouched=function(){return!!this.rating};let r=t(),o=n;assertDefault(r,o),assertPrototypeEquality(r,o),it("getter가 잘 정의되어있어야합니다",function(){let e=new r("어린왕자-0","★","☆");expect(e.getBookId()).toEqual("어린왕자-0"),expect(null===e.getRating()).toBe(!0,"setRating호출 이전에는 값이 null이어야합니다"),expect(e.getActiveShape()).toEqual("★"),expect(e.getInactiveShape()).toEqual("☆"),expect(e.getRatingStatus()).toEqual(["☆","☆","☆","☆","☆"])}),iterateIt("setRating이 잘 정의되어있어야합니다",function(){let e=new r("어린왕자-0","★","☆"),t=new o("어린왕자-0","★","☆"),n=_.random(5);e.setRating(n),t.setRating(n),expect(e.getRatingStatus()).toEqual(t.getRatingStatus())},3),it("isTouched가 잘 정의되어있어야합니다",function(){let e=new r("어린왕자-0","★","☆");expect(e.isTouched()).toBe(!1,"setRating 호출 이전에는 false를 반환해야합니다"),e.setRating(1),expect(e.isTouched()).toBe(!0,"setRating 호출 이후에는 true 반환해야합니다")})})}),PersonE.prototype.getName=function(){return this.name},PersonE.prototype.getAge=function(){return this.age},PersonE.prototype.setName=function(e){this.name=e},PersonE.prototype.setAge=function(e){this.age=e};